(function(e, a) { for(var i in a) e[i] = a[i]; }(exports, /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = __webpack_require__(1);
const progress_1 = __webpack_require__(2);
async function activate(context) {
    const serverModule = context.asAbsolutePath('server/server.bundle.js');
    const debugOptions = { execArgv: ['--nolazy', '--inspect=6600'] };
    const serverOptions = {
        run: { module: serverModule, transport: coc_nvim_1.TransportKind.ipc },
        debug: { module: serverModule, transport: coc_nvim_1.TransportKind.ipc, options: debugOptions },
    };
    const outputChannel = coc_nvim_1.workspace.createOutputChannel('Pyright');
    const config = coc_nvim_1.workspace.getConfiguration('pyright');
    const clientOptions = {
        documentSelector: [{ scheme: 'file', language: 'python' }],
        synchronize: {
            configurationSection: ['python', 'pyright'],
        },
        outputChannel,
        disableCompletion: !!config.get('disableCompletion'),
    };
    const client = new coc_nvim_1.LanguageClient('pyright', 'Pyright Server', serverOptions, clientOptions);
    context.subscriptions.push(coc_nvim_1.services.registLanguageClient(client));
    const progressReporting = new progress_1.ProgressReporting(client);
    context.subscriptions.push(progressReporting);
    const textEditorCommands = ['pyright.organizeimports', 'pyright.addoptionalforparam'];
    textEditorCommands.forEach((commandName) => {
        context.subscriptions.push(coc_nvim_1.commands.registerCommand(commandName, async (offset) => {
            const doc = await coc_nvim_1.workspace.document;
            const cmd = {
                command: commandName,
                arguments: [doc.uri.toString(), offset],
            };
            const edits = await client.sendRequest('workspace/executeCommand', cmd);
            if (!edits) {
                return;
            }
            const wsEdit = {
                changes: {
                    [doc.uri]: edits,
                },
            };
            await coc_nvim_1.workspace.applyEdit(wsEdit);
        }));
    });
    const genericCommands = ['pyright.createtypestub'];
    genericCommands.forEach((command) => {
        context.subscriptions.push(coc_nvim_1.commands.registerCommand(command, async (...args) => {
            const root = coc_nvim_1.workspace.root;
            const module = args.pop();
            if (!module) {
                coc_nvim_1.workspace.showMessage(`Module name is missing`, 'warning');
                return;
            }
            const cmd = {
                command,
                arguments: [root, module],
            };
            client.sendRequest('workspace/executeCommand', cmd);
        }));
    });
}
exports.activate = activate;


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("coc.nvim");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const coc_nvim_1 = __webpack_require__(1);
class ProgressReporting {
    constructor(client) {
        this.statusBarItem = coc_nvim_1.workspace.createStatusBarItem(0, { progress: true });
        client.onReady().then(() => {
            client.onNotification('pyright/beginProgress', async () => { });
            client.onNotification('pyright/reportProgress', (message) => {
                this.statusBarItem.text = `Pyright: ${message}`;
                this.statusBarItem.show();
            });
            client.onNotification('pyright/endProgress', () => {
                this.statusBarItem.hide();
            });
        });
    }
    dispose() {
        this.statusBarItem.dispose();
    }
}
exports.ProgressReporting = ProgressReporting;


/***/ })
/******/ ])));